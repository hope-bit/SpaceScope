import h5py
import numpy as np

# Paths to datasets
train_file_path = 'C:/Users/HopeW/Downloads/MEM679_Project/SpaceScope/galaxy_mnist/GalaxyMNIST/raw/train_dataset.hdf5'
test_file_path = 'C:/Users/HopeW/Downloads/MEM679_Project/SpaceScope/galaxy_mnist/GalaxyMNIST/raw/test_dataset.hdf5'

# Load training dataset
with h5py.File(train_file_path, 'r') as train_file:
    X_train = train_file['images'][:] / 255.0  # Normalize to [0, 1]
    y_train = train_file['labels'][:]

# Load test dataset
with h5py.File(test_file_path, 'r') as test_file:
    X_test = test_file['images'][:] / 255.0  # Normalize to [0, 1]
    y_test = test_file['labels'][:]

# Reshape data to remove the extra dimension
X_train = X_train.reshape(X_train.shape[0], 64, 64, 3)  # Reshape to (8000, 64, 64, 3)
X_test = X_test.reshape(X_test.shape[0], 64, 64, 3)    # Reshape to (2000, 64, 64, 3)

print(f"Training data shape: {X_train.shape}, Labels shape: {y_train.shape}")
print(f"Test data shape: {X_test.shape}, Labels shape: {y_test.shape}")


import tensorflow as tf
import keras
# Define the CNN model

from keras import Sequential, layers

# Define the model
model = Sequential([
    layers.Conv2D(32, (3, 3), activation='relu', input_shape=(64, 64, 3)),  # Updated input shape
    layers.MaxPooling2D((2, 2)),
    layers.Conv2D(64, (3, 3), activation='relu'),
    layers.MaxPooling2D((2, 2)),
    layers.Conv2D(64, (3, 3), activation='relu'),
    layers.Flatten(),
    layers.Dense(128, activation='relu'),
    layers.Dense(len(np.unique(y_train)), activation='softmax')  # One output for each class
])

# Compile the model
model.compile(optimizer='adam',
              loss='sparse_categorical_crossentropy',
              metrics=['accuracy'])

# Print model summary
model.summary()

# Train the model
history = model.fit(X_train, y_train, 
                    epochs=16, 
                    batch_size=32, 
                    validation_split=0.2) # Use 20% of training data for validation



# Evaluate on test dataset
test_loss, test_accuracy = model.evaluate(X_test, y_test)
print(f"Test Accuracy: {test_accuracy:.2f}")



import matplotlib.pyplot as plt

# Plot training and validation accuracy
plt.figure(figsize=(10, 5))
plt.plot(history.history['accuracy'], label='Train Accuracy')
plt.plot(history.history['val_accuracy'], label='Validation Accuracy')
plt.xlabel('Epochs')
plt.ylabel('Accuracy')
plt.legend()
plt.title('Training and Validation Accuracy')
plt.show()


# Save the model
model.save('galaxy_mnist_classifierH5.h5')
model.save('galaxy_mnist_classifierK.keras')

# Load and predict
loaded_model = tf.keras.models.load_model('galaxy_mnist_classifierK.keras')
predictions = loaded_model.predict(X_test)
predicted_classes = np.argmax(predictions, axis=1)

# Compile the model
model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])

# Train or evaluate the model
model.fit(X_train, y_train, epochs=10)


